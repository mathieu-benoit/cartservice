name: ci
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/dependabot.yml'
      - 'gcloud/**'
  pull_request:
env:
  SEVERITY: CRITICAL
jobs:
  job:
    runs-on: ubuntu-20.04
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - id: gcp-auth
        uses: google-github-actions/auth@v0.8.0
        with:
          workload_identity_provider: 'projects/875343227023/locations/global/workloadIdentityPools/wi-pool/providers/cartservice-github-repo'
          service_account: 'gha-containerregistry-push-sa@cartservice-347.iam.gserviceaccount.com'
          token_format: 'access_token'
      - uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          version: latest
      - name: prepare environment variables
        run: |
          shortSha=`echo ${GITHUB_SHA} | cut -c1-7`
          echo "IMAGE_TAG=$shortSha" >> $GITHUB_ENV
          imageBaseName=${{ secrets.CONTAINER_REGISTRY_HOST_NAME }}/${{ secrets.CONTAINER_REGISTRY_PROJECT_ID }}/${{ secrets.CONTAINER_REGISTRY_NAME }}
          echo "IMAGE_BASE_NAME=$imageBaseName" >> $GITHUB_ENV
          echo "IMAGE_NAME=$imageBaseName/boutique/cartservice:$shortSha" >> $GITHUB_ENV
      - name: sign-in to artifact registry
        run: |
          echo "${{ steps.gcp-auth.outputs.access_token }}" | docker login -u oauth2accesstoken --password-stdin ${{ secrets.CONTAINER_REGISTRY_HOST_NAME }}
      - name: manage base images
        run: |
          # Grab the sdk base image in our private registry
          baseImage=$(cat Dockerfile | grep 'mcr.microsoft.com/dotnet/sdk')
          baseImage=($baseImage)
          docker pull ${baseImage[1]}
          newImage=$(echo ${baseImage[1]} | sed "s,mcr.microsoft.com,${IMAGE_BASE_NAME},g")
          docker tag ${baseImage[1]} $newImage
          docker push $newImage
          # Grab the runtime base image in our private registry
          baseImage=$(cat Dockerfile | grep 'mcr.microsoft.com/dotnet/runtime-deps')
          baseImage=($baseImage)
          docker pull ${baseImage[1]}
          newImage=$(echo ${baseImage[1]} | sed "s,mcr.microsoft.com,${IMAGE_BASE_NAME},g")
          docker tag ${baseImage[1]} $newImage
          docker push $newImage
          # Use the base images from our own private registry
          sed -i "s,mcr.microsoft.com,${IMAGE_BASE_NAME},g" Dockerfile
      - name: build container
        run: |
          docker build --tag ${IMAGE_NAME} .
          imageSize=$(printf %.2f "$(($(docker image inspect ${IMAGE_NAME} --format='{{.Size}}') * 10**2 / $(printf '%5.0f\n' 1e6)))e-2")
          echo "IMAGE_SIZE=$imageSize"
      #- name: dockle
      #  run: |
      #    docker run -v /var/run/docker.sock:/var/run/docker.sock --rm goodwithtech/dockle:latest --exit-code 1 --exit-level fatal ${IMAGE_NAME}
      #- name: run trivy vulnerability scanner
      #  uses: aquasecurity/trivy-action@0.2.1
      #  with:
      #    image-ref: ${{ env.IMAGE_NAME }}
      #    format: 'template'
      #    template: '@/contrib/sarif.tpl'
      #    output: 'trivy-results.sarif'
      #    severity: ${{ env.SEVERITY }}
      #- name: upload trivy scan results to GitHub security tab
      #  uses: github/codeql-action/upload-sarif@v1.0.29
      #  with:
      #    sarif_file: 'trivy-results.sarif'
      - name: run container locally as a test
        run: |
          docker run -d -p 8080:8080 --read-only --cap-drop=ALL --user=1000 ${IMAGE_NAME}
      - name: gcloud scan
        run: |
          gcloud components install local-extract --quiet
          gcloud artifacts docker images scan ${IMAGE_NAME} --format='value(response.scan)' > scan_id.txt
          gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) --format='table(vulnerability.effectiveSeverity, vulnerability.cvssScore, noteName, vulnerability.packageIssue[0].affectedPackage, vulnerability.packageIssue[0].affectedVersion.name, vulnerability.packageIssue[0].fixedVersion.name)'
          gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq ${{ env.SEVERITY }}; then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
      #- name: Installing KinD cluster
      #  uses: engineerd/setup-kind@v0.5.0
      #- name: Configuring the KinD installation
      #  run: |
      #    kubectl cluster-info --context kind-kind
      #    kind get kubeconfig --internal >$HOME/.kube/config
      #    kubectl get nodes
      #- name: Load image on the nodes of the KinD cluster
      #  run: |
      #    kind load docker-image ${IMAGE_NAME} --name=kind
      #- name: Deploy and test Kubernetes manifests in KinD cluster
      #  run: |
      #    kubectl create deployment cartservice --image=${IMAGE_NAME}
      #    kubectl wait --for=condition=available --timeout=120s deployment/cartservice
      #    kubectl get all
      #    status=$(kubectl get pods -l app=cartservice -o 'jsonpath={.items[0].status.phase}')
      #    if [ $status != 'Running' ]; then echo "Pod not running!" 1>&2; fi
      - name: push image in container registry
        if: ${{ github.event_name == 'push' }}
        run: |
          docker push ${IMAGE_NAME}
      #- name: create release
      #  uses: actions/create-release@v1.1.4
      #  if: ${{ github.event_name == 'push' }}
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: ${{ env.IMAGE_TAG }}
      #    release_name: ${{ env.IMAGE_TAG }}
      #    draft: false
      #    prerelease: false
      #    body: |
      #      Size: ${{ env.IMAGE_SIZE }}MB
